# This is a basic workflow to help you get started with Actions
name: Build and Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    paths-ignore: 
      - deployments/**
    branches:
      - "*"
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - "*"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
#  gocache:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
  # This workflow contains a single job called "build"
  build:
#    needs:
#      - gocache

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
#      - name: Run cache
#        run: |
#          env | grep GO
#          GOPKG_DIR=$(mkdir -p ~/go/pkg/mod && chmod -R 777 ~/go/pkg/mod && cd ~/go/pkg/mod && pwd)
#          ls -l ~/go/pkg/mod
#          chmod -R 777 ~/go/pkg/mod
#          docker run --rm -t -v $GOPKG_DIR:/go/pkg/mod -v $(pwd):/app -w /app golang:latest bash -c "go mod download && chmod -R 777 /go/pkg/mod"
#          echo "docker resut: $?"
#          mkdir -p gomod
#          cp -R ~/go/pkg/mod/* ./gomod/
      - run:  |
          env
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "COMMIT_SHORT=${GITHUB_SHA:0:7}" >> $GITHUB_ENV
          env
        shell: bash
#      - name: Build and push Docker images
#        uses: docker/build-push-action@v1
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#          repository: ${{ secrets.DOCKER_ORGANIZATION }}/${GITHUB_REPOSITORY#*/}
#          tag_with_ref: true
#          tag_with_sha: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/pay-gateway # list of Docker images to use as base name for tags
          tag-sha: true # add git short SHA as Docker tag
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.MYTOKEN }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          build-args: |
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          COMMIT_SHORT=${GITHUB_SHA:0:7}
          export version="sha-${COMMIT_SHORT}"
          ./scripts/generate_deploys.sh
      - uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f ./generated-deployments
