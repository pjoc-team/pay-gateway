// Code generated by MockGen. DO NOT EDIT.
// Source: certificate.go

// Package mock_authorization is a generated GoMock package.
package mock_authorization

import (
	context "context"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCertificateManager is a mock of CertificateManager interface.
type MockCertificateManager struct {
	ctrl     *gomock.Controller
	recorder *MockCertificateManagerMockRecorder
}

// MockCertificateManagerMockRecorder is the mock recorder for MockCertificateManager.
type MockCertificateManagerMockRecorder struct {
	mock *MockCertificateManager
}

// NewMockCertificateManager creates a new mock instance.
func NewMockCertificateManager(ctrl *gomock.Controller) *MockCertificateManager {
	mock := &MockCertificateManager{ctrl: ctrl}
	mock.recorder = &MockCertificateManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertificateManager) EXPECT() *MockCertificateManagerMockRecorder {
	return m.recorder
}

// GetMerchantCertificate mocks base method.
func (m *MockCertificateManager) GetMerchantCertificate(ctx context.Context, merchantID, serialNumber string) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantCertificate", ctx, merchantID, serialNumber)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantCertificate indicates an expected call of GetMerchantCertificate.
func (mr *MockCertificateManagerMockRecorder) GetMerchantCertificate(ctx, merchantID, serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantCertificate", reflect.TypeOf((*MockCertificateManager)(nil).GetMerchantCertificate), ctx, merchantID, serialNumber)
}

// GetPlatformCertificate mocks base method.
func (m *MockCertificateManager) GetPlatformCertificate(ctx context.Context) (*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformCertificate", ctx)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformCertificate indicates an expected call of GetPlatformCertificate.
func (mr *MockCertificateManagerMockRecorder) GetPlatformCertificate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformCertificate", reflect.TypeOf((*MockCertificateManager)(nil).GetPlatformCertificate), ctx)
}
